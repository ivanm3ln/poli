//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Police2
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class Police2Entities : DbContext
    {
        private static Police2Entities _context;
        public Police2Entities()
            : base("name=Police2Entities")
        {
        }

        public static Police2Entities GetContext()
        {
            _context = new Police2Entities();

            return _context;
        }


        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Request> Request { get; set; }
        public DbSet<Status> Status { get; set; }
        public DbSet<User> User { get; set; }
    
        public virtual int AddRequest(string autoNumber, string description, Nullable<int> idStatus, Nullable<int> idUser)
        {
            var autoNumberParameter = autoNumber != null ?
                new ObjectParameter("AutoNumber", autoNumber) :
                new ObjectParameter("AutoNumber", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var idStatusParameter = idStatus.HasValue ?
                new ObjectParameter("IdStatus", idStatus) :
                new ObjectParameter("IdStatus", typeof(int));
    
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("IdUser", idUser) :
                new ObjectParameter("IdUser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddRequest", autoNumberParameter, descriptionParameter, idStatusParameter, idUserParameter);
        }
    
        public virtual int AddUser(string login, string password, string surname, string name, string patronymic, string email, string phone)
        {
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var patronymicParameter = patronymic != null ?
                new ObjectParameter("Patronymic", patronymic) :
                new ObjectParameter("Patronymic", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUser", loginParameter, passwordParameter, surnameParameter, nameParameter, patronymicParameter, emailParameter, phoneParameter);
        }
    
        public virtual int EditRequest(Nullable<int> idRequest, Nullable<int> idStatus)
        {
            var idRequestParameter = idRequest.HasValue ?
                new ObjectParameter("IdRequest", idRequest) :
                new ObjectParameter("IdRequest", typeof(int));
    
            var idStatusParameter = idStatus.HasValue ?
                new ObjectParameter("IdStatus", idStatus) :
                new ObjectParameter("IdStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditRequest", idRequestParameter, idStatusParameter);
        }
    }
}
